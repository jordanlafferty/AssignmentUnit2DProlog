/* guess.pl 
 *  
 * Computer Scientist guessing game.
 *
 * Author:
 * Date:
 *
 * start with ?- go.     
*/


go :- nl,
      write('Think of a computer scientist and I will guess who it is.'),
      nl,
      write('Please answer yes or no to the following questions:'),
      nl, nl,
      guess(ComputerScientist),
      write('The computer scientist is  '),
      write(ComputerScientist),
      nl,
      undo.

/* hypotheses to be tested */
guess(minsky)	:- minsky, !.
guess(turing) :- turing, !.
guess(babbage)   :- babbage, !.
guess(lovelace)   :- lovelace, !.
guess(hopper)	:- hopper, !.
guess(brooks)	:- brooks, !.
guess(mccarthy)	:- mccarthy, !.
guess(knuth)	:- knuth, !.
guess(easley)	:- easley, !.
guess(allen)	:- allen, !.
guess(unknown).             /* no diagnosis */

/* CS identification rules */
babbage :- bornbefore1930, 
         male, 
    	 verify(known_for_the_difference_engine).
turing :- bornbefore1930, 
           male,
           university.
lovelace :- 
    	bornbefore1930, 
    	 firstprogrammer.
easley	:- 
    nasaemployee.
hopper	:- 
    	bornbefore1930.
allen	:- university.
minsky	:- bornbefore1930,
    		male,
    		university,
    		display,
    		verify(first_school_was_a_university),
    		verify(known_for_the_head_mounted_graphical_display).
knuth	:- male.
brooks	:- male,
    	  university,
           manmonth.
mccarthy	:- male,
               university.

/* classification rules */
bornbefore1930    :- verify(born_before_1930), !.
male    :- verify(is_a_male), !.
university	:- verify(first_school_was_a_university), !.
firstprogrammer  :- verify(known_as_the_first_programmer), !.
nasaemployee	:- verify(known_for_NASA_Software), !.
manmonth	:- verify(known_for_the_mythical_man_month), !.
display	:- verify(known_for_the_head_mounted_graphical_display), !.


/* how to ask questions */
ask(Question) :-
    write('Is the computer scientist '),
    write(Question),
    write('? '),
    read(Response),
    nl,
    ( (Response == yes ; Response == y)
      ->
      assert(yes(Question)) ;
       assert(no(Question)), fail).

:- dynamic yes/1,no/1.

/* How to verify something */
verify(S) :-
   (yes(S) 
    ->
    true ;
    (no(S)
     ->
     fail ;
     ask(S))).

/* undo all yes/no assertions */
undo :- retract(yes(_)),fail. 
undo :- retract(no(_)),fail.
undo.
